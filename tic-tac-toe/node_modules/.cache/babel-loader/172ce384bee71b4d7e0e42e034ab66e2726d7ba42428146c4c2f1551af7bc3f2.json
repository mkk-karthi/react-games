{"ast":null,"code":"var _jsxFileName = \"/var/www/html/node/react-games/tic-tac-toe/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport \"./App.scss\";\nimport \"./Button.scss\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const noRows = 3;\n  const modes = [{\n    label: \"Easy\",\n    value: 0\n  }, {\n    label: \"Hard\",\n    value: 1\n  }, {\n    label: \"Multi Player\",\n    value: 2\n  }];\n  const initialData = [...Array(noRows).keys()].map(() => [...Array(noRows).fill(null)]);\n  const [tern, setTern] = useState(0); // 0-user, 1-computer\n  const [boardData, setBoardData] = useState(initialData); // 0-O, 1-X\n  const [gameOver, setGameOver] = useState(true);\n  const [winner, setWinner] = useState(0);\n  const [mode, setMode] = useState(0);\n  useEffect(() => {\n    const winner = checkWinner(boardData);\n    if (winner !== null) {\n      setWinner(winner);\n      setGameOver(true);\n    } else if (mode != 2 && tern === 1) {\n      computerMove();\n    }\n  }, [boardData, tern]);\n  useEffect(() => {\n    setTern(0);\n    setBoardData(initialData);\n  }, [mode]);\n  const changeData = (x, y) => {\n    if ((mode != 2 && tern === 0 || mode == 2) && !gameOver) {\n      const newBoard = [...boardData];\n      if (newBoard[x][y] === null) {\n        newBoard[x][y] = tern;\n        setBoardData(newBoard);\n        setTern(tern ? 0 : 1);\n      }\n    }\n  };\n  const shuffle = array => {\n    return array.sort(() => Math.random() - 0.5);\n  };\n  const computerMove = () => {\n    const board = structuredClone(boardData);\n    if (mode == 1) {\n      // Try to win\n      let player = tern;\n      for (let x in boardData) {\n        for (let y in boardData[x]) {\n          const boardCopy = structuredClone(board);\n          if (boardCopy[x][y] === null) {\n            boardCopy[x][y] = player;\n            if (checkWinner(boardCopy) === player) {\n              makeMove(x, y);\n              return;\n            }\n          }\n        }\n      }\n      player = tern ? 0 : 1;\n      // Block player win\n      for (let x in boardData) {\n        for (let y in boardData[x]) {\n          const boardCopy = structuredClone(board);\n          if (boardCopy[x][y] === null) {\n            boardCopy[x][y] = player;\n            if (checkWinner(boardCopy) === player) {\n              makeMove(x, y);\n              return;\n            }\n          }\n        }\n      }\n    }\n\n    // Take center\n    let center = Math.floor(noRows / 2);\n    if (board[center][center] === null) {\n      makeMove(center, center);\n      return;\n    }\n\n    // Take a corner\n    let corners = [[0, 0], [0, noRows - 1], [noRows - 1, 0], [noRows - 1, noRows - 1]];\n    for (let [x, y] of shuffle(corners)) {\n      if (board[x][y] === null) {\n        makeMove(x, y);\n        return;\n      }\n    }\n\n    // Take sides\n    for (let x in shuffle(board)) {\n      for (let y in board[x]) {\n        if (board[x][y] === null) {\n          makeMove(x, y);\n          return;\n        }\n      }\n    }\n  };\n  const makeMove = (x, y) => {\n    const newBoard = [...boardData];\n    if (newBoard[x][y] === null) {\n      setTimeout(() => {\n        newBoard[x][y] = tern;\n        setBoardData(newBoard);\n        setTern(tern ? 0 : 1);\n      }, 300);\n    }\n  };\n  const checkWinner = board => {\n    let tempDatas = {};\n    let datas = {};\n    for (let x in board) {\n      for (let y in board[x]) {\n        let player = board[x][y] === 0 ? 0 : board[x][y] === 1 ? 1 : null;\n        if (player !== null) {\n          if (!datas[player]) datas[player] = [];\n          datas[player].push([x, y]);\n          if (!tempDatas[player]) {\n            tempDatas[player] = {\n              x: {},\n              y: {}\n            };\n          }\n          tempDatas[player][\"x\"][x] = tempDatas[player][\"x\"][x] ? tempDatas[player][\"x\"][x] + 1 : 1;\n          tempDatas[player][\"y\"][y] = tempDatas[player][\"y\"][y] ? tempDatas[player][\"y\"][y] + 1 : 1;\n          if (tempDatas[player][\"x\"][x] === noRows || tempDatas[player][\"y\"][y] === noRows) {\n            return player;\n          } else {\n            let diagonalX = Object.values(tempDatas[player][\"x\"]).length;\n            let diagonalY = Object.values(tempDatas[player][\"y\"]).length;\n            if (diagonalX === noRows && diagonalY === noRows) {\n              if (datas[player].reduce((t, v) => v[0] == t && v[1] == t ? t + 1 : t, 0) >= noRows) {\n                return player;\n              } else if (datas[player].reduce((t, v) => v[0] == noRows - t && v[1] == t - 1 ? t - 1 : t, noRows) === 0) {\n                return player;\n              }\n            }\n          }\n        }\n      }\n    }\n    if (board.every(row => row.every(col => col !== null))) return \"draw\";\n    return null;\n  };\n  const restart = () => {\n    setWinner(null);\n    setGameOver(false);\n    setBoardData(initialData);\n    setTern(0);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tic Tac Toe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          value: mode,\n          onChange: e => setMode(e.target.value),\n          children: modes.map((item, key) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: item.value,\n            children: item.label\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: boardData.map((row, x) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: row.map((col, y) => /*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => changeData(x, y),\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: col === 0 ? \"O\" : col === 1 ? \"X\" : \"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 214,\n                  columnNumber: 23\n                }, this)\n              }, y, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 21\n              }, this))\n            }, x, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => !gameOver && setBoardData(initialData),\n          children: \"reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"winner-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [winner !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: winner === \"draw\" ? \"Draw\" : `${winner ? \"X\" : \"O\"} is winner`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }, this), gameOver && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"super-button\",\n          onClick: restart,\n          children: \"Restart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"RWzfJse7qWt28a7koERphyKl+8Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","noRows","modes","label","value","initialData","Array","keys","map","fill","tern","setTern","boardData","setBoardData","gameOver","setGameOver","winner","setWinner","mode","setMode","checkWinner","computerMove","changeData","x","y","newBoard","shuffle","array","sort","Math","random","board","structuredClone","player","boardCopy","makeMove","center","floor","corners","setTimeout","tempDatas","datas","push","diagonalX","Object","values","length","diagonalY","reduce","t","v","every","row","col","restart","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","item","key","onClick","_c","$RefreshReg$"],"sources":["/var/www/html/node/react-games/tic-tac-toe/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./App.scss\";\nimport \"./Button.scss\";\n\nfunction App() {\n  const noRows = 3;\n  const modes = [\n    {\n      label: \"Easy\",\n      value: 0,\n    },\n    {\n      label: \"Hard\",\n      value: 1,\n    },\n    {\n      label: \"Multi Player\",\n      value: 2,\n    },\n  ];\n  const initialData = [...Array(noRows).keys()].map(() => [...Array(noRows).fill(null)]);\n  const [tern, setTern] = useState(0); // 0-user, 1-computer\n  const [boardData, setBoardData] = useState(initialData); // 0-O, 1-X\n  const [gameOver, setGameOver] = useState(true);\n  const [winner, setWinner] = useState(0);\n  const [mode, setMode] = useState(0);\n\n  useEffect(() => {\n    const winner = checkWinner(boardData);\n    if (winner !== null) {\n      setWinner(winner);\n      setGameOver(true);\n    } else if (mode != 2 && tern === 1) {\n      computerMove();\n    }\n  }, [boardData, tern]);\n\n  useEffect(() => {\n    setTern(0);\n    setBoardData(initialData);\n  }, [mode]);\n\n  const changeData = (x, y) => {\n    if (((mode != 2 && tern === 0) || mode == 2) && !gameOver) {\n      const newBoard = [...boardData];\n      if (newBoard[x][y] === null) {\n        newBoard[x][y] = tern;\n        setBoardData(newBoard);\n        setTern(tern ? 0 : 1);\n      }\n    }\n  };\n  const shuffle = (array) => {\n    return array.sort(() => Math.random() - 0.5);\n  };\n\n  const computerMove = () => {\n    const board = structuredClone(boardData);\n\n    if (mode == 1) {\n      // Try to win\n      let player = tern;\n      for (let x in boardData) {\n        for (let y in boardData[x]) {\n          const boardCopy = structuredClone(board);\n          if (boardCopy[x][y] === null) {\n            boardCopy[x][y] = player;\n\n            if (checkWinner(boardCopy) === player) {\n              makeMove(x, y);\n              return;\n            }\n          }\n        }\n      }\n\n      player = tern ? 0 : 1;\n      // Block player win\n      for (let x in boardData) {\n        for (let y in boardData[x]) {\n          const boardCopy = structuredClone(board);\n\n          if (boardCopy[x][y] === null) {\n            boardCopy[x][y] = player;\n\n            if (checkWinner(boardCopy) === player) {\n              makeMove(x, y);\n              return;\n            }\n          }\n        }\n      }\n    }\n\n    // Take center\n    let center = Math.floor(noRows / 2);\n    if (board[center][center] === null) {\n      makeMove(center, center);\n      return;\n    }\n\n    // Take a corner\n    let corners = [\n      [0, 0],\n      [0, noRows - 1],\n      [noRows - 1, 0],\n      [noRows - 1, noRows - 1],\n    ];\n    for (let [x, y] of shuffle(corners)) {\n      if (board[x][y] === null) {\n        makeMove(x, y);\n        return;\n      }\n    }\n\n    // Take sides\n    for (let x in shuffle(board)) {\n      for (let y in board[x]) {\n        if (board[x][y] === null) {\n          makeMove(x, y);\n          return;\n        }\n      }\n    }\n  };\n\n  const makeMove = (x, y) => {\n    const newBoard = [...boardData];\n    if (newBoard[x][y] === null) {\n      setTimeout(() => {\n        newBoard[x][y] = tern;\n        setBoardData(newBoard);\n        setTern(tern ? 0 : 1);\n      }, 300);\n    }\n  };\n\n  const checkWinner = (board) => {\n    let tempDatas = {};\n    let datas = {};\n\n    for (let x in board) {\n      for (let y in board[x]) {\n        let player = board[x][y] === 0 ? 0 : board[x][y] === 1 ? 1 : null;\n\n        if (player !== null) {\n          if (!datas[player]) datas[player] = [];\n          datas[player].push([x, y]);\n\n          if (!tempDatas[player]) {\n            tempDatas[player] = { x: {}, y: {} };\n          }\n          tempDatas[player][\"x\"][x] = tempDatas[player][\"x\"][x] ? tempDatas[player][\"x\"][x] + 1 : 1;\n          tempDatas[player][\"y\"][y] = tempDatas[player][\"y\"][y] ? tempDatas[player][\"y\"][y] + 1 : 1;\n\n          if (tempDatas[player][\"x\"][x] === noRows || tempDatas[player][\"y\"][y] === noRows) {\n            return player;\n          } else {\n            let diagonalX = Object.values(tempDatas[player][\"x\"]).length;\n            let diagonalY = Object.values(tempDatas[player][\"y\"]).length;\n\n            if (diagonalX === noRows && diagonalY === noRows) {\n              if (\n                datas[player].reduce((t, v) => (v[0] == t && v[1] == t ? t + 1 : t), 0) >= noRows\n              ) {\n                return player;\n              } else if (\n                datas[player].reduce(\n                  (t, v) => (v[0] == noRows - t && v[1] == t - 1 ? t - 1 : t),\n                  noRows\n                ) === 0\n              ) {\n                return player;\n              }\n            }\n          }\n        }\n      }\n    }\n    if (board.every((row) => row.every((col) => col !== null))) return \"draw\";\n    return null;\n  };\n\n  const restart = () => {\n    setWinner(null);\n    setGameOver(false);\n    setBoardData(initialData);\n    setTern(0);\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        <h1>Tic Tac Toe</h1>\n        <div>\n          <select value={mode} onChange={(e) => setMode(e.target.value)}>\n            {modes.map((item, key) => (\n              <option value={item.value} key={key}>\n                {item.label}\n              </option>\n            ))}\n          </select>\n        </div>\n        {/* <button class=\"super-button\">\n          <span>Launch Now</span>\n        </button> */}\n        <div>\n          <table>\n            <tbody>\n              {boardData.map((row, x) => (\n                <tr key={x}>\n                  {row.map((col, y) => (\n                    <td key={y} onClick={() => changeData(x, y)}>\n                      <p>{col === 0 ? \"O\" : col === 1 ? \"X\" : \"\"}</p>\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <div>\n          <button onClick={() => !gameOver && setBoardData(initialData)}>reset</button>\n        </div>\n      </div>\n      <div className=\"winner-container\">\n        <div>\n          {winner !== null && (\n            <p>{winner === \"draw\" ? \"Draw\" : `${winner ? \"X\" : \"O\"} is winner`}</p>\n          )}\n          {gameOver && (\n            <button className=\"super-button\" onClick={restart}>\n              Restart\n            </button>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}