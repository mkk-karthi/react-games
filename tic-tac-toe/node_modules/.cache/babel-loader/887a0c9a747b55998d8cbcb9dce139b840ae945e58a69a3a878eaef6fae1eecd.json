{"ast":null,"code":"var _jsxFileName = \"/var/www/html/node/react-games/tic-tac-toe/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport \"./App.scss\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const noRows = 3;\n  const initialData = [...Array(noRows).keys()].map(() => [...Array(noRows).fill(null)]);\n  const [tern, setTern] = useState(0);\n  const [boardData, setBoardData] = useState(initialData);\n  const [soloPlay, setSoloPlay] = useState(true);\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(null);\n  useEffect(() => {\n    const winner = checkWinner(boardData);\n    console.log(\"winner\", winner);\n    if (winner) {\n      setWinner(winner);\n      setGameOver(true);\n    } else if (soloPlay && tern === 1) {\n      computerMove();\n    }\n  }, [boardData, tern]);\n  // Try to win\n  const changeData = (x, y) => {\n    if (tern === 0 && !gameOver) {\n      const newBoard = [...boardData];\n      if (newBoard[x][y] === null) {\n        newBoard[x][y] = tern;\n        setBoardData(newBoard);\n        setTern(tern ? 0 : 1);\n      }\n    }\n  };\n  const computerMove = () => {\n    const board = structuredClone(boardData);\n    let player = tern;\n    for (let x in boardData) {\n      for (let y in boardData[x]) {\n        const boardCopy = structuredClone(board);\n        if (boardCopy[x][y] === null) {\n          boardCopy[x][y] = player;\n          if (checkWinner(boardCopy) === player) {\n            makeMove(x, y);\n            return;\n          }\n        }\n      }\n    }\n    player = tern ? 0 : 1;\n    // Block player win\n    for (let x in boardData) {\n      for (let y in boardData[x]) {\n        const boardCopy = structuredClone(board);\n        if (boardCopy[x][y] === null) {\n          boardCopy[x][y] = player;\n          if (checkWinner(boardCopy) === player) {\n            makeMove(x, y);\n            return;\n          }\n        }\n      }\n    }\n\n    // Take center\n    let center = Math.floor(noRows / 2);\n    if (board[center][center] === null) {\n      makeMove(center, center);\n      return;\n    }\n\n    // Take a corner\n    let corners = [[0, 0], [0, noRows - 1], [noRows - 1, 0], [noRows - 1, noRows - 1]];\n    for (let [x, y] of corners) {\n      if (board[x][y] === null) {\n        makeMove(x, y);\n        return;\n      }\n    }\n\n    // Take sides\n    for (let x in board) {\n      for (let y in board[x]) {\n        if (board[x][y] === null) {\n          makeMove(x, y);\n          return;\n        }\n      }\n    }\n  };\n  const makeMove = (x, y) => {\n    const newBoard = [...boardData];\n    if (newBoard[x][y] === null) {\n      setTimeout(() => {\n        newBoard[x][y] = tern;\n        setBoardData(newBoard);\n        setTern(tern ? 0 : 1);\n      }, 300);\n    }\n  };\n  const checkWinner = board => {\n    if (board.every(cell => cell >= 0)) return \"draw\";\n    let tempDatas = {};\n    for (let x in board) {\n      for (let y in board[x]) {\n        let player = board[x][y] === 0 ? 0 : board[x][y] === 1 ? 1 : null;\n        if (player >= 0) {\n          if (!tempDatas[player]) {\n            tempDatas[player] = {\n              x: {},\n              y: {}\n            };\n          }\n          tempDatas[player][\"x\"][x] = tempDatas[player][\"x\"][x] ? tempDatas[player][\"x\"][x] + 1 : 1;\n          tempDatas[player][\"y\"][y] = tempDatas[player][\"y\"][y] ? tempDatas[player][\"y\"][y] + 1 : 1;\n          if (tempDatas[player][\"x\"][x] === noRows || tempDatas[player][\"y\"][y] === noRows) {\n            return player;\n          } else {\n            let diagonalX = Object.keys(tempDatas[player][\"x\"]).length;\n            let diagonalY = Object.keys(tempDatas[player][\"y\"]).length;\n            if (diagonalX === noRows && diagonalY === noRows) {\n              return player;\n            }\n          }\n        }\n      }\n    }\n    return null;\n  };\n  const restart = () => {\n    setWinner(null);\n    setGameOver(true);\n    setBoardData(initialData);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tic Tac Toe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: boardData.map((row, x) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: row.map((col, y) => /*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => changeData(x, y),\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: col === 0 ? \"O\" : col === 1 ? \"X\" : \"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 23\n                }, this)\n              }, y, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 21\n              }, this))\n            }, x, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setBoardData(initialData),\n          children: \"reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: () => setSoloPlay(!soloPlay),\n          children: soloPlay ? \"Solo\" : \"Multi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: winner === \"draw\" ? \"Draw\" : `${winner ? \"O\" : \"X\"} is winner`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: restart,\n      children: \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"P9mcXSrtVIZ2mNLlojghb5sJzDw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","noRows","initialData","Array","keys","map","fill","tern","setTern","boardData","setBoardData","soloPlay","setSoloPlay","gameOver","setGameOver","winner","setWinner","checkWinner","console","log","computerMove","changeData","x","y","newBoard","board","structuredClone","player","boardCopy","makeMove","center","Math","floor","corners","setTimeout","every","cell","tempDatas","diagonalX","Object","length","diagonalY","restart","children","className","fileName","_jsxFileName","lineNumber","columnNumber","row","col","onClick","_c","$RefreshReg$"],"sources":["/var/www/html/node/react-games/tic-tac-toe/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./App.scss\";\n\nfunction App() {\n  const noRows = 3;\n  const initialData = [...Array(noRows).keys()].map(() => [\n    ...Array(noRows).fill(null),\n  ]);\n  const [tern, setTern] = useState(0);\n  const [boardData, setBoardData] = useState(initialData);\n  const [soloPlay, setSoloPlay] = useState(true);\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(null);\n\n  useEffect(() => {\n    const winner = checkWinner(boardData);\n    console.log(\"winner\", winner);\n    if (winner) {\n      setWinner(winner);\n      setGameOver(true);\n    } else if (soloPlay && tern === 1) {\n      computerMove();\n    }\n  }, [boardData, tern]);\n  // Try to win\n  const changeData = (x, y) => {\n    if (tern === 0 && !gameOver) {\n      const newBoard = [...boardData];\n      if (newBoard[x][y] === null) {\n        newBoard[x][y] = tern;\n        setBoardData(newBoard);\n        setTern(tern ? 0 : 1);\n      }\n    }\n  };\n\n  const computerMove = () => {\n    const board = structuredClone(boardData);\n\n    let player = tern;\n    for (let x in boardData) {\n      for (let y in boardData[x]) {\n        const boardCopy = structuredClone(board);\n        if (boardCopy[x][y] === null) {\n          boardCopy[x][y] = player;\n\n          if (checkWinner(boardCopy) === player) {\n            makeMove(x, y);\n            return;\n          }\n        }\n      }\n    }\n\n    player = tern ? 0 : 1;\n    // Block player win\n    for (let x in boardData) {\n      for (let y in boardData[x]) {\n        const boardCopy = structuredClone(board);\n\n        if (boardCopy[x][y] === null) {\n          boardCopy[x][y] = player;\n\n          if (checkWinner(boardCopy) === player) {\n            makeMove(x, y);\n            return;\n          }\n        }\n      }\n    }\n\n    // Take center\n    let center = Math.floor(noRows / 2);\n    if (board[center][center] === null) {\n      makeMove(center, center);\n      return;\n    }\n\n    // Take a corner\n    let corners = [\n      [0, 0],\n      [0, noRows - 1],\n      [noRows - 1, 0],\n      [noRows - 1, noRows - 1],\n    ];\n    for (let [x, y] of corners) {\n      if (board[x][y] === null) {\n        makeMove(x, y);\n        return;\n      }\n    }\n\n    // Take sides\n    for (let x in board) {\n      for (let y in board[x]) {\n        if (board[x][y] === null) {\n          makeMove(x, y);\n          return;\n        }\n      }\n    }\n  };\n\n  const makeMove = (x, y) => {\n    const newBoard = [...boardData];\n    if (newBoard[x][y] === null) {\n      setTimeout(() => {\n        newBoard[x][y] = tern;\n        setBoardData(newBoard);\n        setTern(tern ? 0 : 1);\n      }, 300);\n    }\n  };\n\n  const checkWinner = (board) => {\n    if (board.every((cell) => cell >= 0)) return \"draw\";\n    let tempDatas = {};\n    for (let x in board) {\n      for (let y in board[x]) {\n        let player = board[x][y] === 0 ? 0 : board[x][y] === 1 ? 1 : null;\n        if (player >= 0) {\n          if (!tempDatas[player]) {\n            tempDatas[player] = { x: {}, y: {} };\n          }\n          tempDatas[player][\"x\"][x] = tempDatas[player][\"x\"][x]\n            ? tempDatas[player][\"x\"][x] + 1\n            : 1;\n          tempDatas[player][\"y\"][y] = tempDatas[player][\"y\"][y]\n            ? tempDatas[player][\"y\"][y] + 1\n            : 1;\n\n          if (\n            tempDatas[player][\"x\"][x] === noRows ||\n            tempDatas[player][\"y\"][y] === noRows\n          ) {\n            return player;\n          } else {\n            let diagonalX = Object.keys(tempDatas[player][\"x\"]).length;\n            let diagonalY = Object.keys(tempDatas[player][\"y\"]).length;\n            if (diagonalX === noRows && diagonalY === noRows) {\n              return player;\n            }\n          }\n        }\n      }\n    }\n    return null;\n  };\n\n  const restart = () => {\n    setWinner(null);\n    setGameOver(true);\n    setBoardData(initialData);\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        <h1>Tic Tac Toe</h1>\n        <div>\n          <table>\n            <tbody>\n              {boardData.map((row, x) => (\n                <tr key={x}>\n                  {row.map((col, y) => (\n                    <td key={y} onClick={() => changeData(x, y)}>\n                      <p>{col === 0 ? \"O\" : col === 1 ? \"X\" : \"\"}</p>\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <div>\n          <button onClick={() => setBoardData(initialData)}>reset</button>\n          <p onClick={() => setSoloPlay(!soloPlay)}>\n            {soloPlay ? \"Solo\" : \"Multi\"}\n          </p>\n        </div>\n      </div>\n      <p>{winner === \"draw\" ? \"Draw\" : `${winner ? \"O\" : \"X\"} is winner`}</p>\n      {gameOver && <button onClick={restart}>Restart</button>}\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}